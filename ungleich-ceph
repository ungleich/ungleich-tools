#!/bin/sh
set -e

usage() {
    cat <<eof >&2
usage: $0 [-c CLASS] [-F] [-h] -m MODE [-d] [-v] [-w WEIGHT] device [device ...]

positional arguments:
  device      device to create OSD on

optional arguments:
  -c CLASS    device class, e.g. hdd or ssd (only used in rest_of_disk mode)
  -F          use fullsize (only used in full_disk mode)
  -h          show this help message and exit
  -m MODE     operate in specified mode: full_disk, rest_of_disk
  -d          debug mode (set -x)
  -w WEIGHT   OSD weight (only used in rest_of_disk mode)
eof
}

full_disk() {
    printf "FULL DISK MODE\n"
    printf "%s, %s, %s, %s\n" "$class" "$fullsize" "$mode" "$weight"
    echo $@
    return 0

    DEV=$1; shift
    ID=$(ceph osd create)

    ceph-disk zap $DEV

    osd_uuid=$(uuidgen)
    ceph-disk prepare --bluestore $DEV --osd-id ${ID} --osd-uuid ${osd_uuid} --crush-device-class hdd

    mkdir /var/lib/ceph/osd/ceph-${ID}
    mount ${DEV}1 /var/lib/ceph/osd/ceph-${ID}
    touch /var/lib/ceph/osd/ceph-${ID}/sysvinit
    ceph auth get-or-create osd.${ID} osd 'allow *' mon 'allow profile osd' > /var/lib/ceph/osd/ceph-${ID}/keyring
    echo ${ID} > /var/lib/ceph/osd/ceph-${ID}/whoami
    ceph-osd --cluster ceph -i ${ID} --mkfs
    chown -R ceph:ceph /var/lib/ceph/osd/ceph-${ID}

    if [ $# -ge 1 ]; then
        DISK_FREE_KB=$(df /dev/ada0p2 | tail -1 | awk '{print $4}')
        SIZE=$(printf "scale=6\n${DISK_FREE_KB} / (1024 ^ 3)")
    else
        SIZE=0.1
    fi

    host=$(hostname)
    ceph osd crush add osd.${ID} ${SIZE} ${host}

    /etc/init.d/ceph start osd.${ID}
}

rest_of_disk() {
    printf "REST OF DISK MODE\n"
    printf "%s, %s, %s, %s\n" "$class" "$fullsize" "$mode" "$weight"
    echo $@
    return 0

    # Based on ceph-disk -v prepare --bluestore /dev/sdc --osd-id ${ID} --osd-uuid $(uuidgen) --crush-device-class "ssd"

    # Create:
    # - block       -> link to partuuid
    # - block_uuid -e> uuid if the block
    # - ceph_fsid   -> get from ceph-conf
    # crush_device_class -> ssd, hdd
    # fsid          -> uuidgen!
    # magic         -> string "ceph osd volume v026"
    # type          -> bluestore

    DEV=$1;shift
    CLASS=$1; shift
    WEIGHT=$1; shift

    magic="ceph osd volume v026"
    fsid=$(ceph-conf --cluster=ceph --name=osd. --lookup fsid)
    uuid_metadata=$(uuidgen)
    uuid_block=$(uuidgen)

    osd_id=$(ceph osd create)

    dev_metadata="/dev/disk/by-partuuid/$uuid_metadata"
    dev_block="/dev/disk/by-partuuid/$uuid_block"

    /sbin/sgdisk --new=0:0:+100M --change-name="0:ceph data" \
                 --partition-guid="0:$uuid_metadata" \
                 --typecode=0:4fbd7e29-9d25-41b8-afd0-062c0ceff05d \
                 --mbrtogpt -- $DEV

    /sbin/udevadm settle --timeout=600

    # Using gdisk --largest-new does not change the name or set guid;
    # So use 2 steps instead
    /sbin/sgdisk --largest-new=0 --mbrtogpt -- $DEV
    /sbin/udevadm settle --timeout=600

    lastpart=$(gdisk -l $DEV | tail -n1 | awk '{ print $1 }')
    /sbin/sgdisk --change-name="${lastpart}:ceph block" \
                 --partition-guid="${lastpart}:$uuid_block" \
                 --typecode="${lastpart}:cafecafe-9b03-4f30-b4c6-b4b80ceff106" \
                 --mbrtogpt -- $DEV
    /sbin/udevadm settle --timeout=600

    /sbin/mkfs -t xfs -f -i size=2048 -- "$dev_metadata"

    mountpath=/var/lib/ceph/osd/ceph-${osd_id}

    mkdir -p "$mountpath"
    mount "$dev_metadata" "$mountpath"

    ln -s $dev_block        "$mountpath/block"

    echo "$uuid_block"    > "$mountpath/block_uuid"
    echo "$fsid"          > "$mountpath/ceph_fsid"
    echo "$magic"         > "$mountpath/magic"
    echo "$CLASS"         > "$mountpath/crush_device_class"

    # Important, otherwise --mkfs later will try to create filestore
    echo bluestore        > "$mountpath/type"

    ceph auth get-or-create "osd.${osd_id}" osd \
         'allow *' mon 'allow profile osd' > $mountpath/keyring

    echo ${osd_id}         > "$mountpath/whoami"
    touch                   "$mountpath/sysvinit"

    ceph-osd --cluster ceph -i "${osd_id}" --mkfs
    chown -R ceph:ceph      "$mountpath"

    host=$(hostname)
    ceph osd crush add osd.${osd_id} ${WEIGHT} ${host}

    echo "$metadata_dev /var/lib/ceph/osd/ceph-${osd_id} xfs noatime 0 0" >> /etc/fstab

    /etc/init.d/ceph start osd.${osd_id}
}

# parse args
class=
fullsize=0
mode=
weight=
debug=

while getopts "c:Fhm:dw:" arg
do
    case "${arg}" in
    c)  class="${OPTARG}"
        ;;
    f)  fullsize=1
        ;;
    h)  usage
        exit 2
        ;;
    m)  mode="${OPTARG}"
        ;;
    d)  debug=1
        ;;
    w)  weight="${OPTARG}"
        ;;
    esac
done

case "${mode}" in
rest_of_disk)
    if [ ! "${class}" ]
    then
        printf "Class is required in 'rest_of_disk' mode\n" >&2
        usage
        exit 2
    fi
    if [ ! "${weight}" ]
    then
        printf "Weight is required in 'rest_of_disk' mode\n" >&2
        usage
        exit 2
    fi
    ;;
full_disk)
    ;;
"")
    usage
    exit 2
    ;;
*)
    printf "Invalid mode '${mode}'\n" >&2
    usage
    exit 2
    ;;
esac

shift $(($OPTIND - 1))
# remaining args in $@
if [ "$#" -lt 1 ]
then
    printf "Device is required\n" >&2
    usage
    exit 2
fi

if [ "${debug}" = "1" ]
then
    set -x
fi

# call mode function
${mode} $@
